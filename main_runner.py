#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫—É Crypto Trading Bot
"""

import sys
import os
import logging
import asyncio
from datetime import datetime
import signal
from pathlib import Path

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ —à–ª—è—Ö—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from config_file import config, MESSAGES, setup_environment
    from crypto_trading_bot import CryptoTradingBot
except ImportError as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
    print("–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –≤ –æ–¥–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó:")
    print("  - main_runner.py (—Ü–µ–π —Ñ–∞–π–ª)")
    print("  - crypto_trading_bot.py")
    print("  - config_file.py")
    print("  - requirements.txt")
    sys.exit(1)

def setup_logging():
    """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –ª–æ–≥—É–≤–∞–Ω–Ω—è"""

    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –ª–æ–≥—ñ–≤
    log_dir = Path('logs')
    log_dir.mkdir(exist_ok=True)

    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥—É–≤–∞–Ω–Ω—è
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'

    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ä—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è
    log_level = getattr(logging, config.LOG_LEVEL.upper(), logging.INFO)

    # –ö–æ–Ω—Ñ—ñ–≥—É—Ä—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    logging.basicConfig(
        level=log_level,
        format=log_format,
        handlers=[
            logging.FileHandler(log_dir / config.LOG_FILE, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )

    # –ó–º–µ–Ω—à—É—î–º–æ —Ä—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —Å—Ç–æ—Ä–æ–Ω–Ω—ñ—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫
    logging.getLogger('httpx').setLevel(logging.WARNING)
    logging.getLogger('telegram').setLevel(logging.WARNING)
    logging.getLogger('apscheduler').setLevel(logging.WARNING)
    logging.getLogger('ccxt').setLevel(logging.WARNING)

    return logging.getLogger(__name__)

def check_requirements():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    required_modules = [
        'telegram', 'ccxt', 'pandas', 'numpy', 'ta',
        'feedparser', 'requests', 'apscheduler'
    ]

    missing_modules = []

    for module in required_modules:
        try:
            __import__(module)
        except ImportError:
            missing_modules.append(module)

    if missing_modules:
        print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–æ–¥—É–ª—ñ:")
        for module in missing_modules:
            print(f"  - {module}")
        print("\n–î–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–π—Ç–µ:")
        print("pip install -r requirements.txt")
        return False

    return True

def create_directories():
    """–°—Ç–≤–æ—Ä—é—î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó"""
    directories = ['logs', 'backups', 'data']

    for directory in directories:
        Path(directory).mkdir(exist_ok=True)

    print("üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó")

def check_tokens():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤"""
    if not config.TELEGRAM_BOT_TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        print("\n–î–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞:")
        print("1. –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª .env —É –∫–æ—Ä–µ–Ω—ñ –ø—Ä–æ–µ–∫—Ç—É")
        print("2. –î–æ–¥–∞–π—Ç–µ —Ä—è–¥–æ–∫: TELEGRAM_BOT_TOKEN=your_token_here")
        print("3. –ê–±–æ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è TELEGRAM_BOT_TOKEN")
        print("4. –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –º–æ–∂–Ω–∞ —É @BotFather –≤ Telegram")
        return False

    if not config.BINANCE_API_KEY:
        print("‚ö†Ô∏è BINANCE_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        print("–ë–æ—Ç –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –ø—É–±–ª—ñ—á–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ Binance")
        print("–î–ª—è –≤–∏—â–æ—ó —à–≤–∏–¥–∫–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å API –∫–ª—é—á—ñ")

    return True

def signal_handler(signum, frame):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è graceful shutdown"""
    print(f"\nüõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–±–æ—Ç—É...")
    sys.exit(0)

def print_startup_banner():
    """–í–∏–≤–æ–¥–∏—Ç—å –±–∞–Ω–µ—Ä –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë            ü§ñ CRYPTO TRADING BOT üöÄ              ‚ïë
‚ïë                                                   ‚ïë
‚ïë  Telegram-–±–æ—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç            ‚ïë
‚ïë  –í–µ—Ä—Å—ñ—è: 1.0.0                                   ‚ïë
‚ïë  –ê–≤—Ç–æ—Ä: AI Assistant                             ‚ïë
‚ïë                                                   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
    print(banner)
    print(f"üïê –ó–∞–ø—É—Å–∫: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üêç Python: {sys.version.split()[0]}")
    print(f"üìÅ –†–æ–±–æ—á–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {os.getcwd()}")

def print_configuration():
    """–í–∏–≤–æ–¥–∏—Ç—å –ø–æ—Ç–æ—á–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"""
    print("\n‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–æ—Ç–∞:")
    print(f"  üìä –¢–∞–π–º—Ñ—Ä–µ–π–º: {config.DEFAULT_TIMEFRAME}")
    print(f"  ‚è∞ –Ü–Ω—Ç–µ—Ä–≤–∞–ª: {config.DEFAULT_INTERVAL_HOURS} –≥–æ–¥–∏–Ω")
    print(f"  üìà RSI –ø–æ—Ä–æ–≥–∏: {config.RSI_OVERSOLD} - {config.RSI_OVERBOUGHT}")
    print(f"  üì¶ –ü–æ—Ä—ñ–≥ –æ–±'—î–º—É: {config.VOLUME_THRESHOLD}%")
    print(f"  üì∞ –î–∂–µ—Ä–µ–ª –Ω–æ–≤–∏–Ω: {len(config.NEWS_SOURCES)}")
    print(f"  üóÉÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: {config.DATABASE_PATH}")
    print(f"  üìã –õ–æ–≥ —Ñ–∞–π–ª: {config.LOG_FILE}")

def run_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤...")

    # –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance
    try:
        import ccxt
        exchange = ccxt.binance({'enableRateLimit': True})
        ticker = exchange.fetch_ticker('BTC/USDT')
        print(f"‚úÖ Binance API: OK (BTC/USDT = ${ticker['last']:.2f})")
    except Exception as e:
        print(f"‚ùå Binance API: {e}")

    # –¢–µ—Å—Ç –æ–±—Ä–æ–±–∫–∏ –Ω–æ–≤–∏–Ω
    try:
        import feedparser
        feed = feedparser.parse('https://www.coindesk.com/arc/outboundfeeds/rss/')
        if feed.entries:
            print(f"‚úÖ RSS –Ω–æ–≤–∏–Ω–∏: OK ({len(feed.entries)} –Ω–æ–≤–∏–Ω)")
        else:
            print("‚ö†Ô∏è RSS –Ω–æ–≤–∏–Ω–∏: –ù–µ–º–∞—î –Ω–æ–≤–∏–Ω")
    except Exception as e:
        print(f"‚ùå RSS –Ω–æ–≤–∏–Ω–∏: {e}")

    # –¢–µ—Å—Ç —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
    try:
        import pandas as pd
        import numpy as np
        import ta

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        data = pd.DataFrame({
            'close': np.random.randn(100).cumsum() + 100,
            'volume': np.random.rand(100) * 1000
        })

        # –¢–µ—Å—Ç—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
        ma7 = ta.trend.sma_indicator(data['close'], window=7)
        rsi = ta.momentum.rsi(data['close'], window=14)

        print(f"‚úÖ –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑: OK")
    except Exception as e:
        print(f"‚ùå –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑: {e}")

    print("üß™ –¢–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n")

def create_env_file():
    """–°—Ç–≤–æ—Ä—é—î –ø—Ä–∏–∫–ª–∞–¥ .env —Ñ–∞–π–ª—É"""
    env_content = """# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here

# Binance API Configuration (Optional)
BINANCE_API_KEY=your_binance_api_key_here
BINANCE_SECRET=your_binance_secret_here

# Bot Settings
DEFAULT_INTERVAL_HOURS=4
RSI_OVERSOLD=30
RSI_OVERBOUGHT=70
VOLUME_THRESHOLD=10.0
LOG_LEVEL=INFO

# Instructions:
# 1. Get Telegram Bot Token from @BotFather
# 2. Get Binance API keys from binance.com (optional)
# 3. Replace 'your_*_here' with real values
# 4. Remove this comment section
"""

    if not os.path.exists('.env'):
        with open('.env.example', 'w', encoding='utf-8') as f:
            f.write(env_content)
        print("üìÑ –°—Ç–≤–æ—Ä–µ–Ω–æ .env.example –∑ –ø—Ä–∏–∫–ª–∞–¥–æ–º –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó")
        print("üí° –°–∫–æ–ø—ñ—é–π—Ç–µ .env.example –≤ .env —Ç–∞ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ç–æ–∫–µ–Ω–∏")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""

    # –û–±—Ä–æ–±–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    if len(sys.argv) > 1:
        if sys.argv[1] == 'test':
            print_startup_banner()
            run_tests()
            return 0
        elif sys.argv[1] == 'setup':
            print("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É...")
            setup_environment()
            create_directories()
            create_env_file()
            print("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            return 0
        elif sys.argv[1] == '--help':
            print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:")
            print("  python main_runner.py        - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
            print("  python main_runner.py test   - –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤")
            print("  python main_runner.py setup  - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É")
            return 0

    # –í–∏–≤–æ–¥–∏–º–æ –±–∞–Ω–µ—Ä
    print_startup_banner()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    if not check_requirements():
        return 1

    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ—Ç–æ—á–µ–Ω–Ω—è
    setup_environment()

    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    create_directories()

    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–∏–∫–ª–∞–¥ .env —Ñ–∞–π–ª—É
    create_env_file()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    if not config.validate():
        return 1

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω–∏
    if not check_tokens():
        return 1

    # –í–∏–≤–æ–¥–∏–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    print_configuration()

    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    logger = setup_logging()

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Crypto Trading Bot...")

        bot = CryptoTradingBot(
            bot_token=config.TELEGRAM_BOT_TOKEN,
            binance_api_key=config.BINANCE_API_KEY,
            binance_secret=config.BINANCE_SECRET
        )

        print("\n‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
        print("üí¨ –ó–Ω–∞–π–¥—ñ—Ç—å –±–æ—Ç–∞ –≤ Telegram —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /start")
        print("üõë –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
        print("üìã –õ–æ–≥–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ –ø–∞–ø—Ü—ñ logs/")
        print("-" * 50)

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        bot.run()

    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        print("\nüëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ. –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!")
        return 0

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", exc_info=True)
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        print("üìã –î–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–∏–≤—ñ—Ç—å—Å—è –≤ –ª–æ–≥ —Ñ–∞–π–ª—ñ")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)

# –ü—É—Å—Ç–∏–π —Å–µ—Ä–≤–µ—Ä, —â–æ–± Render –≤–≤–∞–∂–∞–≤ —Å–µ—Ä–≤—ñ—Å –∂–∏–≤–∏–º
from flask import Flask
import threading

app = Flask(__name__)

@app.route('/')
def index():
    return "Bot is running!"

def run_web_server():
    app.run(host='0.0.0.0', port=10000)

if __name__ == "__main__":
    threading.Thread(target=run_web_server).start()
    main()
