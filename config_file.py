# config.py
"""
–§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–ª—è Crypto Trading Bot
"""

import os
from dataclasses import dataclass
from typing import Dict, List

@dataclass
class BotConfig:
    """–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–æ—Ç–∞"""
    
    # –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    TELEGRAM_BOT_TOKEN: str = os.getenv('TELEGRAM_BOT_TOKEN', '')
    BINANCE_API_KEY: str = os.getenv('BINANCE_API_KEY', '')
    BINANCE_SECRET: str = os.getenv('BINANCE_SECRET', '')
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    DATABASE_PATH: str = 'crypto_bot.db'
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
    DEFAULT_TIMEFRAME: str = '4h'
    DEFAULT_INTERVAL_HOURS: int = 4
    CANDLES_LIMIT: int = 100
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
    MA_PERIODS: Dict[str, int] = None
    RSI_PERIOD: int = 14
    
    # –ü–æ—Ä–æ–≥–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
    RSI_OVERSOLD: float = 30.0
    RSI_OVERBOUGHT: float = 70.0
    VOLUME_THRESHOLD: float = 10.0  # –≤—ñ–¥—Å–æ—Ç–∫–∏
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω
    NEWS_SOURCES: List[str] = None
    NEWS_UPDATE_HOURS: int = 1
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    LOG_LEVEL: str = 'INFO'
    LOG_FILE: str = 'crypto_bot.log'
    
    def __post_init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"""
        if self.MA_PERIODS is None:
            self.MA_PERIODS = {
                'fast': 7,
                'medium': 25,
                'slow': 99
            }
        
        if self.NEWS_SOURCES is None:
            self.NEWS_SOURCES = [
                'https://www.coindesk.com/arc/outboundfeeds/rss/',
                'https://cointelegraph.com/rss',
                'https://decrypt.co/feed'
            ]
    
    def validate(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"""
        errors = []
        
        if not self.TELEGRAM_BOT_TOKEN:
            errors.append("TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        if self.DEFAULT_INTERVAL_HOURS < 1:
            errors.append("DEFAULT_INTERVAL_HOURS –º–∞—î –±—É—Ç–∏ >= 1")
        
        if not (0 < self.RSI_OVERSOLD < self.RSI_OVERBOUGHT < 100):
            errors.append("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –ø–æ—Ä–æ–≥–∏ RSI")
        
        if errors:
            print("‚ùå –ü–æ–º–∏–ª–∫–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:")
            for error in errors:
                print(f"  - {error}")
            return False
        
        return True

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
config = BotConfig()

# –°–ª–æ–≤–Ω–∏–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
MESSAGES = {
    'start': """ü§ñ –í—ñ—Ç–∞—é! –Ø –≤–∞—à –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏.

üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
/setticker PEPEUSDT - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ç—ñ–∫–µ—Ä –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
/analyze PEPEUSDT - –º–∏—Ç—Ç—î–≤–∏–π –∞–Ω–∞–ª—ñ–∑
/setinterval 2h - –∑–º—ñ–Ω–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
/watchlist - —Å–ø–∏—Å–æ–∫ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö —Ç—ñ–∫–µ—Ä—ñ–≤
/enablealerts - —É–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
/disablealerts - –≤–∏–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
/help - –¥–æ–≤—ñ–¥–∫–∞

üöÄ –ü–æ—á–Ω—ñ—Ç—å –∑ –∫–æ–º–∞–Ω–¥–∏ /setticker –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ä–∞!""",
    
    'help': """üìö –î–æ–≤—ñ–¥–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞—Ö:

üéØ /setticker <TICKER> - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ç—ñ–∫–µ—Ä –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
   –ü—Ä–∏–∫–ª–∞–¥: /setticker PEPEUSDT

üîç /analyze <TICKER> - –º–∏—Ç—Ç—î–≤–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç—ñ–∫–µ—Ä–∞
   –ü—Ä–∏–∫–ª–∞–¥: /analyze BTCUSDT

‚è∞ /setinterval <TIME> - –∑–º—ñ–Ω–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
   –ü—Ä–∏–∫–ª–∞–¥: /setinterval 2h
   –î–æ—Å—Ç—É–ø–Ω—ñ: 1h, 2h, 4h, 8h, 12h, 24h

üìã /watchlist - –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è

üîî /enablealerts - —É–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
üîï /disablealerts - –≤–∏–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è

üìä –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –≤–∫–ª—é—á–∞—î:
‚Ä¢ –ö–æ–≤–∑–Ω—ñ —Å–µ—Ä–µ–¥–Ω—ñ (MA7, MA25, MA99)
‚Ä¢ RSI —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
‚Ä¢ –ê–Ω–∞–ª—ñ–∑ –æ–±'—î–º—É
‚Ä¢ –¢—Ä–µ–Ω–¥ Bitcoin —è–∫ —Ñ—ñ–ª—å—Ç—Ä
‚Ä¢ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–∏–Ω

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:
‚Ä¢ ‚úÖ BUY - —Å–∏–≥–Ω–∞–ª –¥–æ –ø–æ–∫—É–ø–∫–∏
‚Ä¢ ‚ùå SELL - —Å–∏–≥–Ω–∞–ª –¥–æ –ø—Ä–æ–¥–∞–∂—É  
‚Ä¢ ‚è∏Ô∏è HOLD - —É—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é""",
    
    'ticker_set': "‚úÖ –¢—ñ–∫–µ—Ä {ticker} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–æ–∂–Ω—ñ {interval} –≥–æ–¥–∏–Ω.",
    'ticker_error': "‚ùå –¢—ñ–∫–µ—Ä {ticker} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ Binance",
    'interval_changed': "‚úÖ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {interval}",
    'alerts_enabled': "üîî –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ!",
    'alerts_disabled': "üîï –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ!",
    'analyzing': "üîÑ –ê–Ω–∞–ª—ñ–∑—É—é {ticker}...",
    'no_ticker': "‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ç—ñ–∫–µ—Ä –∫–æ–º–∞–Ω–¥–æ—é /setticker",
    'invalid_format': "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. {example}",
    'unknown_command': "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥."
}

# –ï–º–æ–¥–∑—ñ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å—Ç–∞–Ω—ñ–≤
EMOJIS = {
    'buy': '‚úÖ',
    'sell': '‚ùå',
    'hold': '‚è∏Ô∏è',
    'up_trend': 'üìà',
    'down_trend': 'üìâ',
    'sideways': '‚û°Ô∏è',
    'btc': '‚Çø',
    'news': 'üì∞',
    'analysis': 'üìä',
    'price': 'üí∞',
    'volume': 'üì¶',
    'rsi': 'üîÑ',
    'ma': 'üìè',
    'time': '‚è∞',
    'alert': 'üîî',
    'warning': '‚ö†Ô∏è',
    'error': '‚ùå',
    'success': '‚úÖ',
    'loading': 'üîÑ'
}

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä–∏–Ω–∫–æ–≤–∏—Ö —É–º–æ–≤
MARKET_CONDITIONS = {
    'bull': {
        'rsi_buy_threshold': 35,
        'rsi_sell_threshold': 75,
        'volume_multiplier': 1.2
    },
    'bear': {
        'rsi_buy_threshold': 25,
        'rsi_sell_threshold': 65,
        'volume_multiplier': 0.8
    },
    'neutral': {
        'rsi_buy_threshold': 30,
        'rsi_sell_threshold': 70,
        'volume_multiplier': 1.0
    }
}

# –ü–æ–ø—É–ª—è—Ä–Ω—ñ —Ç–æ—Ä–≥–æ–≤—ñ –ø–∞—Ä–∏
POPULAR_PAIRS = [
    'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'XRP/USDT',
    'ADA/USDT', 'SOL/USDT', 'DOT/USDT', 'DOGE/USDT',
    'AVAX/USDT', 'LUNA/USDT', 'LINK/USDT', 'UNI/USDT',
    'PEPE/USDT', 'SHIB/USDT', 'MATIC/USDT', 'ATOM/USDT'
]

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –±–µ–∫–∞–ø—É
BACKUP_CONFIG = {
    'enabled': True,
    'interval_hours': 24,
    'max_backups': 7,
    'backup_path': 'backups/'
}

def load_config_from_file(filepath: str = 'bot_config.json') -> BotConfig:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ JSON —Ñ–∞–π–ª—É"""
    import json
    
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            config_data = json.load(f)
        
        return BotConfig(**config_data)
    except FileNotFoundError:
        print(f"‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó {filepath} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.")
        return BotConfig()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
        return BotConfig()

def save_config_to_file(config: BotConfig, filepath: str = 'bot_config.json'):
    """–ó–±–µ—Ä—ñ–≥–∞—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —É JSON —Ñ–∞–π–ª"""
    import json
    
    try:
        config_dict = {
            'TELEGRAM_BOT_TOKEN': config.TELEGRAM_BOT_TOKEN,
            'BINANCE_API_KEY': config.BINANCE_API_KEY,
            'BINANCE_SECRET': config.BINANCE_SECRET,
            'DEFAULT_TIMEFRAME': config.DEFAULT_TIMEFRAME,
            'DEFAULT_INTERVAL_HOURS': config.DEFAULT_INTERVAL_HOURS,
            'RSI_OVERSOLD': config.RSI_OVERSOLD,
            'RSI_OVERBOUGHT': config.RSI_OVERBOUGHT,
            'VOLUME_THRESHOLD': config.VOLUME_THRESHOLD,
            'LOG_LEVEL': config.LOG_LEVEL
        }
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(config_dict, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {filepath}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")

# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
def setup_environment():
    """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –¥–ª—è –±–æ—Ç–∞"""
    import os
    
    # –ü—Ä–∏–∫–ª–∞–¥ .env —Ñ–∞–π–ª—É:
    env_example = """
# Telegram Bot Token (–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π)
TELEGRAM_BOT_TOKEN=1234567890:ABCdefGHIjklMNOpqrsTUVwxyz

# Binance API (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
BINANCE_API_KEY=your_binance_api_key_here
BINANCE_SECRET=your_binance_secret_here

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞
DEFAULT_INTERVAL_HOURS=4
RSI_OVERSOLD=30
RSI_OVERBOUGHT=70
LOG_LEVEL=INFO
"""
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–∏–∫–ª–∞–¥ .env —Ñ–∞–π–ª—É —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
    if not os.path.exists('.env'):
        with open('.env.example', 'w') as f:
            f.write(env_example)
        print("üìÑ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª .env.example –∑ –ø—Ä–∏–∫–ª–∞–¥–æ–º –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó")

if __name__ == "__main__":
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    print("üîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
    
    if config.validate():
        print("‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∞–ª—ñ–¥–Ω–∞")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–∏–∫–ª–∞–¥ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        save_config_to_file(config, 'bot_config.example.json')
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ—Ç–æ—á–µ–Ω–Ω—è
        setup_environment()
        
        print("\nüìã –ü–æ—Ç–æ—á–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:")
        print(f"  –¢–∞–π–º—Ñ—Ä–µ–π–º: {config.DEFAULT_TIMEFRAME}")
        print(f"  –Ü–Ω—Ç–µ—Ä–≤–∞–ª: {config.DEFAULT_INTERVAL_HOURS} –≥–æ–¥–∏–Ω")
        print(f"  RSI –ø–æ—Ä–æ–≥–∏: {config.RSI_OVERSOLD} - {config.RSI_OVERBOUGHT}")
        print(f"  –ü–æ—Ä—ñ–≥ –æ–±'—î–º—É: {config.VOLUME_THRESHOLD}%")
        print(f"  –î–∂–µ—Ä–µ–ª –Ω–æ–≤–∏–Ω: {len(config.NEWS_SOURCES)}")
        
    else:
        print("‚ùå –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –º—ñ—Å—Ç–∏—Ç—å –ø–æ–º–∏–ª–∫–∏")
